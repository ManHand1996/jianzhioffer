"""
难度:困难
输入一个整数 n ，求1～n这n个整数的十进制表示中1出现的次数。

例如，输入12，1～12这些整数中包含1 的数字有1、10、11和12，1一共出现了5次。

 
示例 1：

输入：n = 12
输出：5
示例 2：

输入：n = 13
输出：6
 

限制：

1 <= n < 2^31
"""

def countDigitOne(self, n: int) -> int:
    """
    [1,n]
    1,n个数 出现1的次数
    
    1可以在个位,十位..百位... 
    设第n个数的位数为 x
    则1可以出现在 x位 x-1 x-2 .. 1
    如n = 100
    x3x2x1
    1 0 0    100 = 10**2
    
    对于数字n, 有len_n 位
    使用q[j] 表示存储到第i位数时, 出现1的次数(个位在最右)
    q[0] 存储总数
    例如 n = 324
    q[0] = 
    q[1] = 20
    q[2] = 1
    
    q = [0] * n的数位
    已知只有个位时q[0] = 1 (1,9)
    十进制逢10进1,
    进1后, 个位有(0-9)10个数, 十位有 (1-9)9个数
    所以:
        数字99有以下累加:
         - 当十位为1时, 1*10 + q[0]*1(个位为1) 
         - 当十位不为1时, 8*q[0] (个位为1) 
         - 当只有个为: q[0] == 1
        所以可以求出 len_n - 1 位的1的次数
        q[j] = q[j-1] + 9*q[j-1] + 10^(j)
    
    

    例子:n = 324 转换成字符串s 然后遍历s[i] 到倒数第二位数字
    p = len(s) -i-1: s[i]最大的幂次方(324: 第一位为3,p == 10**2)
    i: 字符串s的索引值
    第i+1位出现1的次数:
        第i+1位范围数字取值位(1-9)有9个,已知前i-1位的出现1的次数所以有:  9*q[i+1]
        第i+1位: 
            ==1: x = s[i:] - 10^p + 1
            > 1: x = 10^(len(s)-i-1)
        q[0] += x + s[i] * q[i+1]
    最后判断s[-1]是否为 0
    如果 s[-1] != '0' q[0] += 1
    返回q[0]为结果 
    """
    if n < 10:
        return 1
    s = str(n)
    len_n = len(s)
    q = [0] * len_n
    q[-1] = 1
    # 倒叙存储 各位数(如百位999,..万位99999..)最大值 出现1的次数
    # 遍历字符串s获取q时可以与字符串s索引+1对应
    for i in range(len_n-1,1,-1):
        q[i-1] = q[i] + 9*q[i] + 10**(len_n-i)

    for i in range(len_n-1):
        p = len_n-i-1  # 当前num 最高位(10^p)
        num = int(s[i])
        x = 0
        if num > 1:
            x = 10**(p) 
        elif num == 1:
            tmp = int(s[i:]) - 10**(p)
            x = tmp + 1
        q[0] += x + num*q[i+1]
    return q[0] if s[-1] == '0' else q[0] + 1