"""
难度:中等
给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” 
，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。
一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。
 
示例 1:

输入: 12258
输出: 5
解释: 12258有5种不同的翻译，分别是"bccfi", "bwfi", "bczi", "mcfi"和"mzi"
 

提示：

0 <= num < 231
"""
def translateNum(self, num: int) -> int:
    """
    解题重点:
    - 两位看成整体
    - 单独一位
    - 无论多少位至少可以翻译成一种
    将数字拆分成 0-25范围 的不同组合
    12258 -> x1,x2,x3,x4,x5
    
    只有一位数时, 只有一种组合
    两位数时,  看第二位是否与第一位组合, 若能 f(1) + 1
    若i = 5
    前i-2位的组合为 f(i-2) # 122
    前i-1位的组合为 f(i-1) # 1225

    由于可以两位组合成一种翻译
    若i =4, num = 12258为例
    即当 第i-1位与第i位作为整体时有 f(i-2)   12(25)
    当第i位单独翻译时有 f(i-1) 种  122(5)
    这时已经知道 f(i-2), f(i-1) 有多少种, 
    
    *无论第i位是什么, 该位的组合数至少是 f(i-1)
    * 无论多少位,都至少有一种组合所以, f(1), f(2) 初始值为1
    
    从第二位开始遍历到最后,
    判断 x(i-1)x(i) 是否能组合翻译,是将f(i-2)
    """
    s = str(num) # 12258
    a,b = 1, 1 # 保存 f(i-1) , f(i-2)的组合数
    # f(i) = f(i-1) + f(i-2)if x[i-1]*10 + x[i] in(10,25) else f(i-1)
    for i in range(1,len(s)):
        t = int(s[i-1])*10 + int(s[i])
        if t <= 25 and t >= 10:
            c = a + b
        else:
            c = a
        b = a
        a = c
        
    return a